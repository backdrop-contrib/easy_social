<?php
/**
 * @file Easy social module.
 * 
 */

/**
 * Define Widget Type constants
 */
define('EASY_SOCIAL_WIDGET_HORIZONTAL', 0);
define('EASY_SOCIAL_WIDGET_VERTICAL', 1);

module_load_include('inc', 'easy_social', 'easy_social.widgets');

/**
 * Implements hook_permission().
 */
function easy_social_permission() {
  return array(
    'administer easy social' => array(
      'title' => t('Administer Easy Social'),
      'description' => t('Manage Easy Social permissions.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function easy_social_menu() {
  $items = array();

  $items['admin/config/content/easy_social'] = array(
    'title' => 'Easy Social Settings',
    'description' => 'Configure the social buttons and node types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_easy_social_admin_config_main'),
    'access arguments' => array('administer easy social'),
    'file' => 'easy_social.admin.inc',
  );

  $items['admin/config/content/easy_social/default'] = array(
    'title' => 'Easy Social Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'easy_social.admin.inc',
  );

  $items['admin/config/content/easy_social/paths-ignore'] = array(
    'title' => 'Ignore Paths',
    'description' => 'Global paths to ignore and do not display Easy Social',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_easy_social_admin_config_ignore_paths'),
    'access arguments' => array('administer easy social'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'easy_social.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_variable_info().
 */
function easy_social_variable_info() {

  $variables['easy_social_ignore_paths'] = array(
    'title' => t('Easy Social Global Ignore Paths'),
    'default' => '',
    'group' => 'easy_social',
    'token' => FALSE,
  );

  $variables['easy_social_global_typebtn'] = array(
    'title' => t('Easy Social Global Type of Buttons'),
    'default' => 0,
    'group' => 'easy_social',
    'token' => FALSE,
  );

  $variables['easy_social_global_social_buttons'] = array(
    'title' => t('Easy Social Global Type of Network Buttons'),
    'default' => array('twitter', 'facebook', 'googleplus', 'linkedin'),
    'group' => 'easy_social',
    'token' => FALSE,
  );

  $variables['easy_social_tt_global_account_via'] = array(
    'title' => t('Easy Social Global Mention Account'),
    'default' => '',
    'group' => 'easy_social',
    'token' => FALSE,
  );

  $variables['easy_social_tt_global_account_related'] = array(
    'title' => t('Easy Social Global Related Account'),
    'default' => '',
    'group' => 'easy_social',
    'token' => FALSE,
  );

  $variables['easy_social_tt_global_account_description'] = array(
    'title' => t('Easy Social Global Twitter Description'),
    'default' => 'Check it out: !title',
    'group' => 'easy_social',
    'token' => FALSE,
  );

  $node_types = node_type_get_types();

  foreach ($node_types as $type => $typeobj) {

    $variables['easy_social_' . $type . '_override'] = array(
      'title' => t('Easy Social Override Option for type %type', array('%type' => $typeobj->name)),
      'default' => -1,
      'group' => 'easy_social',
      'token' => FALSE,
    );

    $variables['easy_social_' . $type . '_typebtn'] = array(
      'title' => t('Easy Social Type of Buttons for %type', array('%type' => $typeobj->name)),
      'default' => -1,
      'group' => 'easy_social',
      'token' => FALSE,
    );

    $variables['easy_social_' . $type . '_social_buttons'] = array(
      'title' => t('Easy Social Network Buttons for %type', array('%type' => $typeobj->name)),
      'default' => array(),
      'group' => 'easy_social',
      'token' => FALSE,
    );
  }

  return $variables;
}

/**
 * Implements hook_theme().
 */
function easy_social_theme() {
  $theme = array(
    'easy_social_links' => array(
      'template' => 'easy-social-links',
      'variables' => array('social_links' => NULL),
    ),
  );
  return $theme;
}

/**
 * Implements hook_field_extra_fields().
 * The Easy Social available in Manage display page in the content types
 */
function easy_social_field_extra_fields() {
  $extra = array();
  $node_types = node_type_get_types();
  foreach ($node_types as $type => $typeobj) {
    $extra['node'][$type] = array(
      'display' => array(
        'easy_social' => array(
          'label' => t('Easy Social'),
          'weight' => 100,
        ),
      ),
    );
  }
  return $extra;
}

/**
 * Implements hook_node_view().
 * Certify to load the buttons in the moment I want
 */
function easy_social_node_view($node, $view_mode, $langcode) {

  // Check if the path is ignored
  $urls_ignored = variable_get_value('easy_social_ignore_paths');

  $page_match = FALSE;

  $path = drupal_get_path_alias($_GET['q']);

  // Compare with the internal and path alias (if any).
  $page_match = drupal_match_path($path, $urls_ignored);

  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $urls_ignored);
  }

  if (!$page_match) {
    //Check if this type has a custom setting
    if (variable_get_value('easy_social_' . $node->type . '_override') == 1) {
      $type = variable_get_value('easy_social_' . $node->type . '_typebtn');
      $buttons = variable_get_value('easy_social_' . $node->type . '_social_buttons');
    }
    //Global settings
    else {
      // @TODO figure out how to deal with wiget-defined variables
      $type = variable_get_value('easy_social_global_typebtn');
      $buttons = variable_get_value('easy_social_global_social_buttons');
    }

    //Url to be shared
    $url = url('node/' . $node->nid, array('absolute' => TRUE));

    $social_links = array();
    $widgets = easy_social_get_widgets();

    //Load Js files and generate respective markups
    foreach ($buttons as $service) {
      if (is_string($service)) {
        $data = array(
          'nid' => $node->nid,
          'title' => $node->title
        );
        
        // add external javascript, if any
        if (isset($widgets[$service]['script'])) {
          drupal_add_js($widgets[$service]['script'], 'external');
        }

        if (isset($widgets[$service]['markup'])) {
          $social_links[$service] = call_user_func($widgets[$service]['markup'], $url, $type, $data);
        }
      }
    }

    //If at least one button is selected, go on
    if (count($social_links) > 0) {
      $node->content['easy_social'] = array(
        '#theme' => 'easy_social_links',
        '#social_links' => $social_links,
        '#weight' => 999
      );
    }
  }
}

/**
 * Returns a list of enabled social widgets
 * Results are cached
 * 
 * @return array
 * @TODO implement static cache
 */
function easy_social_get_widgets() {
  $cache = cache_get('easy_social_widgets');

  if (isset($cache->data) && is_array($cache->data)) {
    $return = $cache->data;
  }
  else {
    $return = array();

    foreach (module_implements('easy_social_widget') as $name) {
      $widgets = module_invoke($name, 'easy_social_widget');
      $return = array_merge($return, $widgets);
    }

    cache_set('easy_social_widgets', $return, 'bin', CACHE_TEMPORARY);
  }

  return $return;
}

/**
 * Implements hook_easy_social_widgets().
 */
function easy_social_easy_social_widget() {
  return array(
    'facebook' => array(
      'name' => 'Facebook',
      'markup' => '_easy_social_widget_facebook_markup',
      'script' => 'http://static.ak.fbcdn.net/connect.php/js/FB.Share',
    ),
    'googleplus' => array(
      'name' => 'Google+',
      'markup' => '_easy_social_widget_googleplus_markup',
      'script' => 'https://apis.google.com/js/plusone.js',
    ),
    'linkedin' => array(
      'name' => 'LinkedIn',
      'markup' => '_easy_social_widget_linkedin_markup',
      'script' => 'http://platform.linkedin.com/in.js',
    ),
    'twitter' => array(
      'name' => 'Twitter',
      'markup' => '_easy_social_widget_twitter_markup',
      'script' => 'http://platform.twitter.com/widgets.js',
    ),
  );
}